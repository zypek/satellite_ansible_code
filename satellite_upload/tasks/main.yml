---
- name: Upload files to Satellite Repositories
  block:
    - name: Import Satellite Check Role
      ansible.builtin.include_role:
        name: satellite_check

    - name: Ensure temporary directory exists
      ansible.builtin.file:
        path: "{{ sat_package_tmp }}"
        state: directory
        mode: "0755"

    - name: Check
      debug:
        msg: "{{ item.1.package_url }}/{{ item.1.package_name }}"
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Check
      debug:
        msg: "{{ item.0.name }} and {{ item.1.name }}"
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Download "{{ item.1.package_name }}" to "{{ sat_package_tmp }}"
      ansible.builtin.get_url:
        url: "{{ item.1.package_url }}/{{ item.1.package_name }}"
        dest: "{{ sat_package_tmp }}/{{ item.1.package_name }}"
        mode: "0644"
      register: download_result
      retries: 3
      delay: 5
      until: download_result is success
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Fail if download failed for "{{ item.1.package_name }}"
      ansible.builtin.fail:
        msg: "Failed to download {{ item.1.package_name }} from {{ item.1.package_url }} after 3 retries."
      when: download_result is failed
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Upload "{{ item.1.package_name }}" to Satellite repository
      redhat.satellite.content_upload:
        username: "{{ satellite_deployment_admin_username }}"
        password: "{{ satellite_deployment_admin_password }}"
        server_url: "{{ satellite_deployment_server }}"
        src: "{{ sat_package_tmp }}/{{ item.1.package_name }}"
        product: "{{ item.0.name }}"
        repository: "{{ item.1.name }}"
        organization: "{{ satellite_deployment_organization }}"
        validate_certs: false  # Set to true if using valid certs
      register: upload_result
      retries: 3
      delay: 30
      until: upload_result is success
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Fail if upload failed for "{{ item.1.package_name }}"
      ansible.builtin.fail:
        msg: "Failed to upload {{ item.1.package_name }} to Satellite repository {{ item.1.name }} after 3 retries."
      when: upload_result is failed
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Show upload result for "{{ item.1.package_name }}"
      ansible.builtin.debug:
        msg: "Upload of {{ item.1.package_name }} to repository {{ item.1.name }} completed successfully."
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Delete temporary file "{{ item.1.package_name }}"
      ansible.builtin.file:
        path: "{{ sat_package_tmp }}/{{ item.1.package_name }}"
        state: absent
      when: download_result is success or upload_result is success
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

  rescue:
    - name: Delete temporary file in rescue for "{{ item.1.package_name }}"
      ansible.builtin.file:
        path: "{{ sat_package_tmp }}/{{ item.1.package_name }}"
        state: absent
      loop: "{{ sat_dictionary.products | subelements('repositories') }}"
      loop_control:
        label: "{{ item.1.package_name }}"

    - name: Handle errors in the block for "{{ item.1.package_name }}"
      ansible.builtin.fail:
        msg: "An error occurred during file upload. Details: {{ ansible_failed_result.msg }}"

