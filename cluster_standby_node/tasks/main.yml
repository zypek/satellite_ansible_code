---
- name: Set Node into Standby mode
  block:
    - name: Run crm_node -l to get cluster node list
      ansible.builtin.command: crm_node -l
      register: crm_node_output
    
    - name: Parse crm_node -l output into a list
      ansible.builtin.set_fact:
        cluster_nodes: "{{ crm_node_output.stdout_lines | map('regex_replace', '^\\d+\\s+(\\S+)\\s+.*', '\\1') | list }}"
      when: crm_node_output.rc == 0 

    - name: Find and set the current Cluster Name
      ansible.builtin.command: crm_node -n
      register: cluster_node_name

    - name: Set the current_cluster_name var
      ansible.builtin.set_fact:
        current_cluster_name: "{{ cluster_node_name['stdout'] }}"

    - name: Check if current hostname is in the cluster node list
      ansible.builtin.set_fact:
        is_cluster_member: "{{ current_cluster_name in cluster_nodes }}"
      when: crm_node_output.rc == 0 
    
    - name: Fail if current host is not a cluster member
      ansible.builtin.fail:
        msg: "Host {{ current_cluster_name }} is not a member of the cluster."
      when: not is_cluster_member
    
    - name: Check cluster nodes' standby status
      ansible.builtin.command: "crm_mon -1 --node={{ current_cluster_name }} -I nodes -U summary"
      register: crm_mon_output
      changed_when: false
    
    - name: Verify if current node is in standby mode
      ansible.builtin.set_fact:
        is_in_standby: "{{ 'Node ' + current_cluster_name + ': standby' in crm_mon_output.stdout }}"
    
    - name: Verify Status of the HANA resources
      ansible.builtin.command: pcs resource status "{{ hana_pcs_resource }}"
      register: ra_hana_status
    
    - name: Extract Master and Slave server names from ra_hana_status output
      ansible.builtin.set_fact:
        master_server: "{{ ra_hana_status.stdout | regex_search('(?<=\\* Masters: \\[ )(.*?)(?= \\])', '\\1') | first }}"
        slave_servers: "{{ (ra_hana_status.stdout | regex_search('(?<=\\* Slaves: \\[ )([^\\]]+)', '\\1') | first | default('')) | split(' ') | select('!=', '') | list }}"
    
    - name: Add Slave servers to ad-hoc inventory
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: dynamic_slaves
      loop: "{{ slave_servers }}"
    
    - name: Verify if the node is a Slave
      ansible.builtin.assert:
        that:
          - ( current_cluster_name in groups.dynamic_slaves ) and ( current_cluster_name not in master_server )
        fail_msg: "{{ current_cluster_name }} is not in a slave list. Exiting"
        success_msg: "{{ current_cluster_name }} is in a slave list. Proceeding"
      when: not is_in_standby
      
    - name: Run pcs node standby
      ansible.builtin.command: "pcs node standby {{ current_cluster_name }}"
      register: cluster_node_standby
      when: not is_in_standby
    
    - name: Pause for a while
      ansible.builtin.pause:
        seconds: 10
      when: not is_in_standby
    
    - name: Check cluster nodes' standby status
      ansible.builtin.command: "crm_mon -1 --node={{ current_cluster_name }} -I nodes -U summary"
      register: pcs_status_output
      changed_when: false
    
    - name: Extract the Standby line
      ansible.builtin.set_fact:
        is_in_standby: "{{ 'Node ' + current_cluster_name + ': standby' in pcs_status_output.stdout }}"

    - name: Fail if the current node is not in standby mode
      ansible.builtin.fail:
        msg: "{{ current_cluster_name }} is not in standby mode!"
      when: not is_in_standby

  rescue:
    - name: Handle errors in the block
      ansible.builtin.fail:
        msg: "An error occurred during AWS role assumption or tag management. Details: {{ ansible_failed_result.msg }}"

  always:
    - name: Block Always Execution
      ansible.builtin.debug:
        msg: "Block execution completed"
