---
- name: Gather facts (including hostname)
  ansible.builtin.setup:

- name: Retrieve hostname from ansible_facts
  ansible.builtin.set_fact:
    current_hostname: "{{ ansible_facts['hostname'] }}"

- name: Retrieve Instance ID from Metadata
  ansible.builtin.uri:
    url: http://169.254.169.254/latest/meta-data/local-hostname
#    url: http://169.254.169.254/latest/meta-data/hostname
    return_content: true
  register: instance_metadata

- name: Set Instance ID as Fact
  ansible.builtin.set_fact:
    instance_id: "{{ instance_metadata.content }}"

- name: Run crm_node -l to get cluster node list
  ansible.builtin.command: crm_node -l
  register: crm_node_output

- name: Parse crm_node -l output into a list
  ansible.builtin.set_fact:
    cluster_nodes: "{{ crm_node_output.stdout_lines | map('regex_replace', '^\\d+\\s+(\\S+)\\s+.*', '\\1') | list }}"

- name: Debug cluster nodes
  ansible.builtin.debug:
    var: cluster_nodes

- name: Check if current hostname is in the cluster node list
  ansible.builtin.set_fact:
    is_cluster_member: "{{ current_hostname in cluster_nodes }}"

- name: Fail if current host is not a cluster member
  ansible.builtin.fail:
    msg: "Host {{ current_hostname }} is not a member of the cluster."
  when: not is_cluster_member

- name: Set cluster node name variable
  ansible.builtin.set_fact:
    cluster_node_name: "{{ cluster_nodes | select('search', current_hostname) | first }}"

- name: Check cluster nodes' standby status
  ansible.builtin.command: pcs status nodes
  register: pcs_status_output
  changed_when: false

- name: Extract the Standby line
  ansible.builtin.set_fact:
    standby_nodes: "{{ pcs_status_output.stdout_lines | select('search', 'Standby:') | first }}"
  run_once: true

- name: Verify if current node is in standby mode
  ansible.builtin.set_fact:
    is_in_standby: "{{ cluster_node_name in standby_nodes }}"

- name: Verify Status of the HANA resources
  ansible.builtin.command: pcs resource status "{{ hana_pcs_resource }}"
  register: fence_hana_status

- name: Extract Master and Slave server names from fence_hana_status output
  ansible.builtin.set_fact:
    master_server: "{{ fence_hana_status.stdout | regex_search('(?<=\\* Masters: \\[ )(.*?)(?= \\])', '\\1') | first }}"
    slave_servers: "{{ (fence_hana_status.stdout | regex_search('(?<=\\* Slaves: \\[ )([^\\]]+)', '\\1') | first | default('')) | split(' ') | select('!=', '') | list }}"

- name: Add Slave servers to ad-hoc inventory
  ansible.builtin.add_host:
    name: "{{ item }}"
    groups: dynamic_slaves
  loop: "{{ slave_servers }}"

- name: Verify if the node is a Slave
  ansible.builtin.assert:
    that:
      - ( cluster_node_name in groups.dynamic_slaves ) and ( cluster_node_name not in master_server )
    fail_msg: "{{ cluster_node_name }} is not in a slave list. Exiting"
    success_msg: "{{ cluster_node_name }} is in a slave list. Proceeding"
  when: not is_in_standby
  
- name: Run pcs node standby
  ansible.builtin.command: "pcs node standby {{ cluster_node_name }}"
  register: cluster_node_standby
  when: not is_in_standby

- name: Pause for a while
  ansible.builtin.pause:
    seconds: 10
  when: not is_in_standby

- name: Check cluster nodes' standby status
  ansible.builtin.command: pcs status nodes
  register: pcs_status_output
  changed_when: false
  when: not is_in_standby

- name: Extract the Standby line
  ansible.builtin.set_fact:
    standby_nodes: "{{ pcs_status_output.stdout_lines | select('search', 'Standby:') | first }}"
  run_once: true
  when: not is_in_standby

- name: Verify if current node is in standby mode
  ansible.builtin.set_fact:
    is_in_standby: "{{ cluster_node_name in standby_nodes }}"

- name: Fail if the current node is not in standby mode
  ansible.builtin.fail:
    msg: "{{ cluster_node_name }} is not in standby mode!"
  when: not is_in_standby
