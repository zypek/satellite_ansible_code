---
- name: "Publish and Promote Satellite Content Views for {{ satellite_deployment_server.split('/')[2] }}"
  block:
    - name: "Check latest CV versions"
      redhat.satellite.content_view_info:
        username: "{{ satellite_deployment_admin_username }}"
        password: "{{ satellite_deployment_admin_password }}"
        server_url: "{{ satellite_deployment_server }}"
        name: "{{ item }}"
        validate_certs: false
        organization: "{{ satellite_deployment_organization }}"
      register: sat_ccv_versions
      loop: "{{ satellite_content_views }}"

    - name: "Build dictionary of CV names and their latest versions"
      ansible.builtin.set_fact:
        cv_version_dict: >-
          {{
            dict(sat_ccv_versions.results | map(attribute='content_view') | 
            map(attribute='name') | zip(sat_ccv_versions.results | map(attribute='content_view.latest_version')))
          }}

    - name: Debug CV versions dictionary
      ansible.builtin.debug:
        var: cv_version_dict

    - name: "Publish Content Views to Library"
      redhat.satellite.content_view_version:
        username: "{{ satellite_deployment_admin_username }}"
        password: "{{ satellite_deployment_admin_password }}"
        server_url: "{{ satellite_deployment_server }}"
        content_view: "{{ item.key }}"
        organization: "{{ satellite_deployment_organization }}"
        validate_certs: false
        lifecycle_environments: Library
      register: publish_result
      retries: 3
      delay: 300
      until: publish_result is success
      loop: "{{ cv_version_dict|dict2items }}"
      when: sat_cv_publish | default(false)

    - name: "Promote Content Views to {{ satellite_lifecycle }}"
      redhat.satellite.content_view_version:
        username: "{{ satellite_deployment_admin_username }}"
        password: "{{ satellite_deployment_admin_password }}"
        server_url: "{{ satellite_deployment_server }}"
        content_view: "{{ item.key }}"
        organization: "{{ satellite_deployment_organization }}"
        validate_certs: false
        lifecycle_environments: "{{ satellite_lifecycle }}"
        version: "{{ item.value }}"
      register: promote_result
      retries: 3
      delay: 300
      until: promote_result is success
      loop: "{{ cv_version_dict|dict2items }}"
      when: sat_cv_promote | default(false)

    - name: Fail if CV Publish or Promote failed
      ansible.builtin.fail:
        msg: "Failed to publish or promote {{ item.item.key }} after 3 retries."
      when: (publish_result is defined and publish_result is failed) or (promote_result is defined and promote_result is failed)
      loop: "{{ publish_result.results | default([]) + promote_result.results | default([]) }}"
      loop_control:
        label: "{{ item.item.key }}"
