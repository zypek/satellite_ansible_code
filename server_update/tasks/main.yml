---
- name: Assume Role
  amazon.aws.sts_assume_role:
    role_arn: "arn:aws:iam::{{ aws_account_no }}:role/{{ aws_role }}"
    role_session_name: "assumeRoleSession"
    region: "{{ aws_region }}"
  register: assumed_role
  delegate_to: localhost

- name: Retrieve Instance ID from Metadata
  ansible.builtin.uri:
    url: http://169.254.169.254/latest/meta-data/instance-id
    return_content: true
  register: instance_metadata

- name: Set Instance ID as Fact
  ansible.builtin.set_fact:
    instance_id: "{{ instance_metadata.content }}"

- name: Retrieve Attached Volume ID(s)
  amazon.aws.ec2_instance_info:
    instance_ids: "{{ instance_id }}"
    region: "{{ aws_region }}"
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
  register: instance_info
  delegate_to: localhost

- name: Create Snapshot of the Root Volume
  amazon.aws.ec2_snapshot:
    volume_id: "{{ item }}"
    description: "Snapshot for volume {{ item }} of instance {{ instance_id }}"
    region: "{{ aws_region }}"
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
  loop: "{{ instance_info.instances[0].block_device_mappings | map(attribute='ebs.volume_id') | list }}"
  delegate_to: localhost
  register: snapshot_results

- name: Verify Snapshot Creation
  ansible.builtin.debug:
    msg: "Snapshot created successfully: {{ snapshot_results.results | map(attribute='snapshot_id') | list }}"

- name: Check File System Space
  ansible.builtin.shell:
    cmd: set -o pipefail && df -h | awk '{if ($6 != "/home" && NR > 1 && $5+0 > 95) {exit 1}}'
    executable: /bin/bash
  register: fs_check
  failed_when: fs_check.rc != 0
  changed_when: false

- name: Report Insufficient Space if Necessary
  ansible.builtin.fail:
    msg: "One or more file systems have less than 5% free space."
  when: fs_check.failed

- name: Update Host Using DNF
  ansible.builtin.dnf:
    name: "*"
    state: latest
  async: 1000
  poll: 0
  register: dnf_update

- name: Check Sync Status
  ansible.builtin.async_status:
    jid: "{{ dnf_update.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 30

- name: Debug Status of the update
  ansible.builtin.debug:
    var: job_result.finished

- name: Reboot Server
  ansible.builtin.reboot:
    reboot_timeout: 300

- name: Verify sshd Service is Running
  ansible.builtin.service_facts:

- name: Check each service status
  ansible.builtin.assert:
    that:
      - ansible_facts.services[item + '.service'].state == 'running'
    fail_msg: "{{ item }} service is not running!"
    success_msg: "{{ item }} service is running."
  loop: "{{ system_services_list }}"

- name: Report Update Success
  ansible.builtin.debug:
    msg: "Update was successful and all services are running."

- name: "Check The CV version"
  theforeman.foreman.content_view_info:
    username: "{{ satellite_deployment_admin_username }}"
    password: "{{ satellite_deployment_admin_password }}"
    server_url: "{{ satellite_deployment_server }}"
    name: "{{ satellite_content_view }}"
    validate_certs: false
    organization: "{{ satellite_deployment_organization }}"
  register: sat_ccv_version

- name: Initialize composite CV fact
  ansible.builtin.set_fact:
    cv_comp:
      name: "{{ sat_ccv_version.content_view.name }}"
      version: "{{ sat_ccv_version.content_view.latest_version }}"
      components: []

- name: Populate component CV details
  ansible.builtin.set_fact:
    cv_comp: "{{ cv_comp | combine({'components': cv_comp.components + [component_entry]}) }}"
  loop: "{{ sat_ccv_version.content_view.components }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    component_id: "{{ item.id }}"
    component_version: "{{ item.version }}"
    content_view_component: "{{ sat_ccv_version.content_view.content_view_components | selectattr('content_view_version.id', '==', component_id) | first }}"
    component_cvv: "{{ (content_view_component.component_content_view_versions | selectattr('version', '==', component_version) | first) if content_view_component else {} }}"
    component_entry:
      name: "{{ item.content_view.name }}"
      version: "{{ component_version }}"
      published_date: "{{ component_cvv.published_at_words | default('Date not available') }}"

- name: Show composite CV structure
  ansible.builtin.debug:
    var: cv_comp

- name: Create an update tag summary string from composite CV
  ansible.builtin.set_fact:
    update_summary: >-
      CV-Comp:{{ cv_comp.version }}{% for comp in cv_comp.components %}, {{ comp.name }}:{{ comp.version }}{% endfor %}

- name: Debug the update summary (ensure it is within 256 characters)
  ansible.builtin.debug:
    msg: "Update summary is: {{ update_summary }} ({{ update_summary | length }} characters)"

- name: Create tag key and value facts
  ansible.builtin.set_fact:
    backup_tag_key: "Server_update_{{ instance_id }}_{{ ansible_date_time.epoch }}"
    backup_tag_value: "{{ update_summary }}"

- name: Apply composite CV update tag to instance
  amazon.aws.ec2_tag:
    resource: "{{ instance_id }}"
    region: "{{ aws_region }}"
    tags: "{{ { backup_tag_key: backup_tag_value } }}"
    state: present
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
  delegate_to: localhost

- name: Get current instance tags
  amazon.aws.ec2_instance_info:
    instance_ids: "{{ instance_id }}"
    region: "{{ aws_region }}"
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
  register: instance_info
  delegate_to: localhost

- name: Extract Server_update_* tags as a sorted list (latest first)
  ansible.builtin.set_fact:
    server_update_tags: >-
      {{
         instance_info.instances[0].tags
         | dict2items
         | selectattr('key', 'match', '^Server_update_')
         | sort(attribute='key', reverse=true)
         | list
      }}

- name: Determine keys to keep (the two latest tags)
  ansible.builtin.set_fact:
    keep_keys: "{{ (server_update_tags | map(attribute='key') | list)[0:2] }}"

- name: Build a dictionary of old tags to remove (all except the two we keep)
  ansible.builtin.set_fact:
    cleanup_tags: "{{ cleanup_tags | default({}) | combine({ item.key: item.value }) }}"
  loop: "{{ server_update_tags | rejectattr('key', 'in', keep_keys) | list }}"

- name: Remove old Server_update_* tags (leaving the two latest)
  amazon.aws.ec2_tag:
    resource: "{{ instance_id }}"
    region: "{{ aws_region }}"
    state: absent
    tags: "{{ cleanup_tags }}"
    access_key: "{{ assumed_role.sts_creds.access_key }}"
    secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    session_token: "{{ assumed_role.sts_creds.session_token }}"
  delegate_to: localhost
  when: (cleanup_tags | default([])) | length > 0
